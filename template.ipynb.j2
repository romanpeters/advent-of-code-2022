{
    "cells": [
        {
            "cell_type": "markdown",
            "source": ["---# Puzzle 1\n"],
            "metadata": {"collapsed": false, "pycharm": {"name": "#%% md\n"}},
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "outputs": [],
            "source": [
                "import logging\n",
                "import sys\n",
                "from ctypes import CDLL\n",
                "\n",
                'sys.path.append("..")\n',
                "import utilsp\n",
                "\n",
                'logger = utilsp.get_logger("{{ day }}", logging.DEBUG)\n',
                'c_utils = CDLL("../utilsc.so")\n',
                "\n",
                'with open("../input/{{ day }}.txt") as f:\n',
                "    INPUT = f.read()\n",
                'logger.info("initialization complete!")',
            ],
            "metadata": {"collapsed": false, "pycharm": {"name": "#%%\n"}},
        },
        {
            "cell_type": "markdown",
            "source": ["# Solution"],
            "metadata": {"collapsed": false, "pycharm": {"name": "#%% md\n"}},
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "outputs": [],
            "source": ["# puzzle solution here"],
            "metadata": {"collapsed": false, "pycharm": {"name": "#%%\n"}},
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "outputs": [],
            "source": [
                "@utilsp.timer\n",
                "def part1(input_):\n",
                "    result = None\n",
                "    return result\n",
                "\n",
                "\n",
                'print("solution part 1:", part1(INPUT))',
            ],
            "metadata": {"collapsed": false, "pycharm": {"name": "#%%\n"}},
        },
        {
            "cell_type": "markdown",
            "source": ["---# Puzzle 2"],
            "metadata": {"collapsed": false, "pycharm": {"name": "#%% md\n"}},
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "outputs": [],
            "source": [
                "@utilsp.timer\n",
                "def part2(input_):\n",
                "    result = None\n",
                "    return result\n",
                "\n",
                "\n",
                'print("solution part 2:", part2(INPUT))',
            ],
            "metadata": {"collapsed": false, "pycharm": {"name": "#%%\n"}},
        },
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3",
        },
        "language_info": {
            "codemirror_mode": {"name": "ipython", "version": 2},
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython2",
            "version": "2.7.6",
        },
    },
    "nbformat": 4,
    "nbformat_minor": 0,
}
