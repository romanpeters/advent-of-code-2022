#!/usr/bin/env python
import logging
from pathlib import Path
import json
import nbformat
from nbconvert.preprocessors import ExecutePreprocessor


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


def generate_answers_template(path: Path, day: str):
    """Generate a template for the answers json file"""
    logging.info(f"Generating answers template for {day}")
    if not path.exists():
        with open(path, "w") as f:
            f.write("{}")
    with open(path, "r") as f:
        answers = json.load(f)
    if day not in answers.keys():
        answers[day] = {"answers": {"part1": None, "part2": None}}
        with open(path, "w") as f:
            json.dump(answers, f, indent=4, sort_keys=True)


def test_convert_notebooks():
    """Convert all notebooks in /notebooks to .py files"""
    logging.info("Converting notebooks to .py files")
    assert (
        len(list(Path(".").glob("*.ipynb"))) > 0
    ), f"No notebooks found in {Path('.').absolute()}"
    for notebook in Path(".").glob("*.ipynb"):
        logging.info(f"Converting {notebook}")
        nb = nbformat.read(notebook, as_version=4)
        # ep = ExecutePreprocessor(timeout=600, kernel_name="python3")
        # ep.preprocess(nb, {"metadata": {"path": "."}})
        with open(f"{notebook.stem}.py", "w") as f:
            f.write("# AUTOGENERATED FROM NOTEBOOK\n")
        with open(f"{notebook.stem}.py", "a") as f:
            # write the code cells to the file
            for cell in nb.cells:
                if cell.cell_type == "code":
                    f.write(cell.source + "\n")
        generate_answers_template(Path("../tests/answers.json"), notebook.stem)


if __name__ == "__main__":
    test_convert_notebooks()
